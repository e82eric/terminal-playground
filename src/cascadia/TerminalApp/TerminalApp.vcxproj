<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="..\..\..\common.openconsole.props" Condition="'$(OpenConsoleDir)'==''" />

  <PropertyGroup>
    <!-- cppwinrt.build.pre.props depends on these settings: -->
    <!-- build a dll, not exe (Application) -->
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <SubSystem>Console</SubSystem>
    <!-- sets a bunch of Windows Universal properties -->
    <OpenConsoleUniversalApp>true</OpenConsoleUniversalApp>
  </PropertyGroup>
  <Import Project="$(OpenConsoleDir)src\cppwinrt.build.pre.props" />
  <PropertyGroup Label="Globals">
    <ProjectGuid>{CA5CAD1A-44BD-4AC7-AC72-F16E576FDD12}</ProjectGuid>
    <ProjectName>TerminalApp</ProjectName>
    <RootNamespace>TerminalApp</RootNamespace>
  </PropertyGroup>
  <!-- ========================= XAML files ======================== -->
  <ItemGroup>
    <!-- DON'T PUT XAML FILES HERE! Put them in TerminalAppLib.vcxproj -->
  </ItemGroup>

  <!-- ========================= Headers ======================== -->
  <ItemGroup>
    <!-- Only put headers for winrt types in here. Don't put other header files
    in here - put them in TerminalAppLib.vcxproj instead! -->
    <ClInclude Include="pch.h" />
    <ClInclude Include="TerminalPage.h" />
    <ClInclude Include="MinMaxCloseControl.h" />
    <ClInclude Include="AppKeyBindings.h" />
    <ClInclude Include="TitlebarControl.h" />
    <ClInclude Include="TabRowControl.h" />
    <ClInclude Include="App.h" />
  </ItemGroup>
  <!-- ========================= Cpp Files ======================== -->
  <ItemGroup>
    <!-- Don't put source files in here - put them in TerminalAppLib.vcxproj instead! -->
    <ClCompile Include="pch.cpp">
      <PrecompiledHeader>Create</PrecompiledHeader>
    </ClCompile>
  </ItemGroup>
  <!-- ========================= idl Files ======================== -->
  <ItemGroup>
    <!-- DON'T PUT IDL FILES HERE! Put them in TerminalApp.vcxproj -->
  </ItemGroup>
  <!-- ========================= Misc Files ======================== -->
  <ItemGroup>
    <None Include="packages.config" />
    <None Include="TerminalApp.def" />
  </ItemGroup>
  <!-- ========================= Project References ======================== -->
  <ItemGroup>
    <!--
      the packaging project won't recurse through our dependencies, you have to
      make sure that if you add a cppwinrt dependency to any of these projects,
      you also update all the consumers
    -->
    <ProjectReference Include="$(OpenConsoleDir)src\types\lib\types.vcxproj">
      <Project>{18D09A24-8240-42D6-8CB6-236EEE820263}</Project>
    </ProjectReference>

    <!-- The midl compiler however, _will_ aggregate our winmd dependencies
    somehow. So make sure to only include top-level dependencies here (don't
    include Settings and Connection, since Control will include them for us) -->
    <ProjectReference Include="$(OpenConsoleDir)src\cascadia\TerminalSettings\TerminalSettings.vcxproj" />
    <ProjectReference Include="$(OpenConsoleDir)src\cascadia\TerminalConnection\TerminalConnection.vcxproj" />
    <ProjectReference Include="$(OpenConsoleDir)src\cascadia\TerminalControl\TerminalControl.vcxproj" />

    <!-- Reference TerminalAppLib here, so we can use it's TerminalApp.winmd as
    our TerminalApp.winmd. This didn't work correctly in VS2017, you'd need to
    manually reference the lib -->

    <ProjectReference Include="$(OpenConsoleDir)src\cascadia\TerminalApp\lib\TerminalAppLib.vcxproj" >
      <Private>true</Private>
      <CopyLocalSatelliteAssemblies>true</CopyLocalSatelliteAssemblies>
    </ProjectReference>

  </ItemGroup>

  <PropertyGroup>
    <!-- A small helper for paths to the compiled cppwinrt projects -->
    <_BinRoot Condition="'$(Platform)' != 'Win32'">$(OpenConsoleDir)$(Platform)\$(Configuration)\</_BinRoot>
    <_BinRoot Condition="'$(Platform)' == 'Win32'">$(OpenConsoleDir)$(Configuration)\</_BinRoot>
  </PropertyGroup>

  <PropertyGroup>
    <!--
      DON'T REDIRECT OUR OUTPUT.
      Setting this will tell cppwinrt.build.post.props to copy our output from
      the default OutDir up one level, so the wapproj will be able to find it.
     -->
    <NoOutputRedirection>true</NoOutputRedirection>
  </PropertyGroup>
  <ItemDefinitionGroup>
    <ClCompile>
      <AdditionalIncludeDirectories>$(OpenConsoleDir)\dep\jsoncpp\json;%(AdditionalIncludeDirectories);</AdditionalIncludeDirectories>
    </ClCompile>
    <Link>
      <AdditionalDependencies>User32.lib;WindowsApp.lib;shell32.lib;%(AdditionalDependencies)</AdditionalDependencies>
    </Link>
  </ItemDefinitionGroup>
  <Import Project="$(OpenConsoleDir)src\common.build.post.props" />

  <Import Project="$(OpenConsoleDir)src\cppwinrt.build.post.props" />

  <!--
    This is a terrible, terrible rule. There exists a bug in Visual Studio 2019 16.2 and 16.3 previews
    where ResolveAssemblyReferences will try and fail to parse a .lib when it produces a .winmd.
    To fix that, we have to _temporarily_ replace the %(Implementation) on any winmd-producing
    static library references with the empty string so as to make ResolveAssemblyReferences
    not try to read it.

    Upstream problem report:
    https://developercommunity.visualstudio.com/content/problem/629524/static-library-reference-causes-there-was-a-proble.html
  -->
  <Target Name="_RemoveTerminalAppLibImplementationFromReference" BeforeTargets="ResolveAssemblyReferences">
    <ItemGroup>
      <_TerminalAppLibProjectReference Include="@(_ResolvedProjectReferencePaths)" Condition="'%(Filename)' == 'TerminalApp'" />
      <_ResolvedProjectReferencePaths Remove="@(_TerminalAppLibProjectReference)" />
      <_ResolvedProjectReferencePaths Include="@(_TerminalAppLibProjectReference)">
        <Implementation />
      </_ResolvedProjectReferencePaths>
    </ItemGroup>
  </Target>

  <Target Name="_RestoreTerminalAppLibImplementationFromReference" AfterTargets="ResolveAssemblyReferences">
    <ItemGroup>
      <_ResolvedProjectReferencePaths Remove="@(_TerminalAppLibProjectReference)" />
      <_ResolvedProjectReferencePaths Include="@(_TerminalAppLibProjectReference)" />
    </ItemGroup>
  </Target>
  <!-- End "terrible, terrible rule" -->

</Project>
